version: '1'

services:
  app:
    container_name: golang_container
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
#      - TEST_POSTGRES_USER=${TEST_DB_USER}
#      - TEST_POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
#      - TEST_POSTGRES_DB=${TEST_DB_NAME}
#      - TEST_DATABASE_HOST=${TEST_DB_HOST}
#      - TEST_DATABASE_PORT=${TEST_DB_PORT}
    tty: true
    build: .
    ports:
      - 8000:8080
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - postgresdb
    networks:
      - ntw
  postgresdb:
    image: postgres:latest
    container_name: postgres_container
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - DATABASE_HOST=${DB_HOST}
    ports:
      - '1234:5436'
    volumes:
#      - ./pg_data:/var/lib/postgresql/data
      - .:/var/lib/postgresql/data
    networks:
      - ntw
  migrate:
    image: migrate/migrate
    networks:
      - ntw
    volumes:
      - .:/internal/db
    command: ["-path", "/internal/db", "-database", "postgres://postgres:password@postgresdb:5436/postgres?sslmode=disable", "up"]
    links:
      - postgresdb
volumes:
  pg_data:
# Networks to be created to facilitate communication between containers

networks:
  ntw:
    driver: bridge