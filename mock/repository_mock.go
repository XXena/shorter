// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	entities "github.com/XXena/shorter/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockRecordInterface is a mock of RecordInterface interface.
type MockRecordInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRecordInterfaceMockRecorder
}

// MockRecordInterfaceMockRecorder is the mock recorder for MockRecordInterface.
type MockRecordInterfaceMockRecorder struct {
	mock *MockRecordInterface
}

// NewMockRecordInterface creates a new mock instance.
func NewMockRecordInterface(ctrl *gomock.Controller) *MockRecordInterface {
	mock := &MockRecordInterface{ctrl: ctrl}
	mock.recorder = &MockRecordInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordInterface) EXPECT() *MockRecordInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRecordInterface) Create(record entities.Record) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", record)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRecordInterfaceMockRecorder) Create(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRecordInterface)(nil).Create), record)
}

// Delete mocks base method.
func (m *MockRecordInterface) Delete(recordID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordInterfaceMockRecorder) Delete(recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordInterface)(nil).Delete), recordID)
}

// GetByToken mocks base method.
func (m *MockRecordInterface) GetByToken(token string) (entities.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByToken", token)
	ret0, _ := ret[0].(entities.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByToken indicates an expected call of GetByToken.
func (mr *MockRecordInterfaceMockRecorder) GetByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByToken", reflect.TypeOf((*MockRecordInterface)(nil).GetByToken), token)
}

// GetByURL mocks base method.
func (m *MockRecordInterface) GetByURL(longURL string) (entities.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByURL", longURL)
	ret0, _ := ret[0].(entities.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByURL indicates an expected call of GetByURL.
func (mr *MockRecordInterfaceMockRecorder) GetByURL(longURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByURL", reflect.TypeOf((*MockRecordInterface)(nil).GetByURL), longURL)
}

// Update mocks base method.
func (m *MockRecordInterface) Update(recordID int, record entities.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", recordID, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRecordInterfaceMockRecorder) Update(recordID, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecordInterface)(nil).Update), recordID, record)
}
