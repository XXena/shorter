// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	entities "github.com/XXena/shorter/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockRecordServiceInterface is a mock of RecordServiceInterface interface.
type MockRecordServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRecordServiceInterfaceMockRecorder
}

// MockRecordServiceInterfaceMockRecorder is the mock recorder for MockRecordServiceInterface.
type MockRecordServiceInterfaceMockRecorder struct {
	mock *MockRecordServiceInterface
}

// NewMockRecordServiceInterface creates a new mock instance.
func NewMockRecordServiceInterface(ctrl *gomock.Controller) *MockRecordServiceInterface {
	mock := &MockRecordServiceInterface{ctrl: ctrl}
	mock.recorder = &MockRecordServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordServiceInterface) EXPECT() *MockRecordServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRecordServiceInterface) Create(arg0 entities.Record) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRecordServiceInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRecordServiceInterface)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockRecordServiceInterface) Delete(recordID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordServiceInterfaceMockRecorder) Delete(recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordServiceInterface)(nil).Delete), recordID)
}

// ForwardToCreate mocks base method.
func (m *MockRecordServiceInterface) ForwardToCreate(url string, expiry time.Time) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardToCreate", url, expiry)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForwardToCreate indicates an expected call of ForwardToCreate.
func (mr *MockRecordServiceInterfaceMockRecorder) ForwardToCreate(url, expiry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardToCreate", reflect.TypeOf((*MockRecordServiceInterface)(nil).ForwardToCreate), url, expiry)
}

// GetByURL mocks base method.
func (m *MockRecordServiceInterface) GetByURL(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByURL indicates an expected call of GetByURL.
func (mr *MockRecordServiceInterfaceMockRecorder) GetByURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByURL", reflect.TypeOf((*MockRecordServiceInterface)(nil).GetByURL), arg0)
}

// Redirect mocks base method.
func (m *MockRecordServiceInterface) Redirect(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redirect", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redirect indicates an expected call of Redirect.
func (mr *MockRecordServiceInterfaceMockRecorder) Redirect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockRecordServiceInterface)(nil).Redirect), arg0)
}

// Update mocks base method.
func (m *MockRecordServiceInterface) Update(recordID int, record entities.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", recordID, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRecordServiceInterfaceMockRecorder) Update(recordID, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecordServiceInterface)(nil).Update), recordID, record)
}
